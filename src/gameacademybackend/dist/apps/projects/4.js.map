{"version":3,"file":"4.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAO;AACP;AACA,YAAY,8FAA8F;AAC1G,UAAU,6BAA6B;AACvC;AACA,gBAAgB,uCAAuC,QAAQ,iGAAqC;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;ACxB4D;AACS;AACnC;AACY;AAC9C;AACA;AACA;AACO,gCAAgC;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB,gCAAwB;AAC1C;AACA,SAAS;AACT;AACA,8BAA8B,YAAY;AAC1C;AACA,0BAA0B,6BAAY,yBAAyB,mBAAmB;AAClF;AACA;AACA,KAAK;AACL;AACA,QAAQ,6CAAoB;AAC5B;AACA;AACA;;;AC3BgC;AACD","sources":["webpack:///../../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js","webpack:///../../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","webpack:///../../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/index.js"],"sourcesContent":["export const fromWebToken = (init) => async (awsIdentityProperties) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/nested-clients/sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: {\n                ...awsIdentityProperties?.callerClientConfig,\n                ...init.parentClientConfig,\n            },\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\", {\n            logger: init.logger,\n        });\n    }\n    const credentials = await fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n    if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {\n        setCredentialFeature(credentials, \"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN\", \"h\");\n    }\n    return credentials;\n};\n","export * from \"./fromTokenFile\";\nexport * from \"./fromWebToken\";\n"],"names":[],"sourceRoot":""}