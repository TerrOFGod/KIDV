{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"@nestjs/config\"","webpack:///external commonjs \"@nestjs/mongoose\"","webpack:///external commonjs \"nestjs-rmq\"","webpack:///./src/app/auth/auth.module.ts","webpack:///external commonjs \"@nestjs/jwt\"","webpack:///./src/app/configs/jwt.config.ts","webpack:///./src/app/user/user.module.ts","webpack:///./src/app/user/models/user.model.ts","webpack:///../../shared/interfaces/src/index.ts","webpack:///../../shared/interfaces/src/lib/auth.interface.ts","webpack:///../../shared/interfaces/src/lib/user.interface.ts","webpack:///./src/app/user/repos/user.repository.ts","webpack:///external commonjs \"mongoose\"","webpack:///./src/app/user/user.commands.ts","webpack:///../../shared/contracts/src/index.ts","webpack:///../../shared/contracts/src/lib/account/account.change-profile.ts","webpack:///external commonjs \"class-transformer\"","webpack:///external commonjs \"class-validator\"","webpack:///../../shared/contracts/src/lib/account/account.change-role.ts","webpack:///../../shared/contracts/src/lib/account/account.login.ts","webpack:///../../shared/contracts/src/lib/account/account.register.ts","webpack:///../../shared/contracts/src/lib/account/account.user-info.ts","webpack:///../../shared/contracts/src/lib/account/account.user-list.ts","webpack:///../../shared/contracts/src/lib/account/account.delete-user.ts","webpack:///../../shared/contracts/src/lib/account/account.user-search.ts","webpack:///../../shared/contracts/src/lib/account/account.change-password-profile.ts","webpack:///../../shared/contracts/src/lib/project/game.create.ts","webpack:///external commonjs \"multer\"","webpack:///../../shared/contracts/src/lib/project/game.get-all.ts","webpack:///../../shared/contracts/src/lib/project/comment.create.ts","webpack:///../../shared/contracts/src/lib/project/comment.list.ts","webpack:///./src/app/auth/others/account.constants.ts","webpack:///./src/app/user/entities/user.entity.ts","webpack:///external commonjs \"bcryptjs\"","webpack:///./src/app/user/user.quries.ts","webpack:///./src/app/auth/auth.controller.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/configs/mongo.config.ts","webpack:///./src/app/configs/rmq.config.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { RMQModule } from 'nestjs-rmq';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { getMongoConfig } from './configs/mongo.config';\r\nimport { getRMQConfig } from './configs/rmq.config';\r\nimport { UserModule } from './user/user.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({ isGlobal: true, envFilePath: 'envs/.account.env' }),\r\n    RMQModule.forRootAsync(getRMQConfig()),\r\n    UserModule,\r\n    AuthModule,\r\n    MongooseModule.forRootAsync(getMongoConfig()),\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","module.exports = require(\"tslib\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"nestjs-rmq\");","import { Module } from '@nestjs/common';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { getJwtConfig } from '../configs/jwt.config';\r\nimport { UserModule } from '../user/user.module';\r\nimport { AuthContoller } from './auth.controller';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Module({\r\n  imports: [UserModule, JwtModule.registerAsync(getJwtConfig())],\r\n  controllers: [AuthContoller],\r\n  providers: [AuthService],\r\n})\r\nexport class AuthModule {}\r\n","module.exports = require(\"@nestjs/jwt\");","import { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { JwtModuleAsyncOptions } from '@nestjs/jwt';\r\n\r\nexport const getJwtConfig = (): JwtModuleAsyncOptions => ({\r\n  imports: [ConfigModule],\r\n  inject: [ConfigService],\r\n  useFactory: (configService: ConfigService) => ({\r\n    secret: configService.get('JWT_SECRET'),\r\n    signOptions: {\r\n      expiresIn: '4h',\r\n    },\r\n  }),\r\n});\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { User, UserSchema } from './models/user.model';\r\nimport { UserRepository } from './repos/user.repository';\r\nimport { UserCommands } from './user.commands';\r\nimport { UserQueries } from './user.quries';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: User.name, schema: UserSchema }])],\r\n  providers: [UserRepository],\r\n  exports: [UserRepository],\r\n  controllers: [UserCommands, UserQueries],\r\n})\r\nexport class UserModule {\r\n  name: string;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { IUser, UserRole } from '@shared/interfaces';\r\nimport { HydratedDocument } from 'mongoose';\r\n\r\nexport type UserDocument = HydratedDocument<User>;\r\n\r\n@Schema({ timestamps: true })\r\nexport class User implements IUser {\r\n  @Prop()\r\n  displayName?: string;\r\n\r\n  @Prop({ required: true })\r\n  email: string;\r\n\r\n  @Prop({ required: true })\r\n  passwordHash: string;\r\n\r\n  @Prop({\r\n    required: true,\r\n    enum: UserRole,\r\n    type: String,\r\n    default: UserRole.Guest,\r\n  })\r\n  role: UserRole;\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","export * from './lib/auth.interface';\r\nexport * from './lib/user.interface';\r\n","export interface IJWTPayload {\r\n  id: string;\r\n}\r\n","import { Types } from 'mongoose';\r\n\r\nexport enum UserRole {\r\n  Guest = 'Guest',\r\n  Teacher = 'Teacher',\r\n  Student = 'Student',\r\n  Admin = 'Admin',\r\n}\r\n\r\nexport interface IUser {\r\n  _id?: Types.ObjectId;\r\n  displayName?: string;\r\n  email: string;\r\n  passwordHash: string;\r\n  role: UserRole;\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UserEntity } from '../entities/user.entity';\r\nimport { User } from '../models/user.model';\r\nimport { IUser } from '@shared/interfaces';\r\n\r\n@Injectable()\r\nexport class UserRepository {\r\n  constructor(@InjectModel(User.name) private readonly userModel: Model<User>) {}\r\n\r\n  async createUser(user: UserEntity) {\r\n    const newUser = new this.userModel(user);\r\n    return newUser.save();\r\n  }\r\n\r\n  async findUser(email: string) {\r\n    return this.userModel.findOne({ email }).exec();\r\n  }\r\n\r\n  async findUserById(id: string) {\r\n    return this.userModel.findById(id).exec();\r\n  }\r\n\r\n  async findAllUsers(): Promise<IUser[]> {\r\n    return this.userModel.find().select('email displayName role').lean().exec();\r\n  }\r\n\r\n  async updateUserByEmail(email: string, partialEntity: Partial<UserEntity>) {\r\n    return this.userModel.findOneAndUpdate({ email }, partialEntity, {\r\n      new: true,\r\n    });\r\n  }\r\n\r\n  async updateUserById({ _id, ...rest }: UserEntity) {\r\n    return this.userModel.updateOne({ _id }, { $set: { ...rest } }).exec();\r\n  }\r\n\r\n  async deleteUser(email: string) {\r\n    return this.userModel.deleteOne({ email }).exec();\r\n  }\r\n\r\n  async searchByDisplayName(searchTerm?: string): Promise<IUser[]> {\r\n    const regex = searchTerm?.trim() ? new RegExp(searchTerm.trim(), 'i') : null;\r\n    const filter = regex ? { displayName: regex } : {};\r\n    return this.userModel.find(filter).select('_id email displayName role').lean().exec();\r\n  }\r\n}\r\n","module.exports = require(\"mongoose\");","import { Body, Controller } from '@nestjs/common';\r\nimport { AccountChangePasswordProfile, AccountChangeProfile, AccountChangeRole } from '@shared/contracts';\r\nimport { RMQRoute, RMQValidate } from 'nestjs-rmq';\r\nimport { THIS_USER_IS_NOT_EXISTS, WRONG_OLD_PASSWORD } from '../auth/others/account.constants';\r\nimport { UserEntity } from './entities/user.entity';\r\nimport { UserRepository } from './repos/user.repository';\r\nimport { AccountDeleteUser } from '@shared/contracts';\r\n\r\n@Controller()\r\nexport class UserCommands {\r\n  constructor(private readonly userRepository: UserRepository) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountChangeProfile.topic)\r\n  async userInfo(@Body() { user, id }: AccountChangeProfile.Request): Promise<AccountChangeProfile.Response> {\r\n    const existedUser = await this.userRepository.findUserById(id);\r\n    if (!existedUser) throw new Error(THIS_USER_IS_NOT_EXISTS);\r\n    const userEntity = new UserEntity(existedUser).updateProfile(user.displayName);\r\n    await this.userRepository.updateUserById(userEntity);\r\n    return { user };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountChangeRole.topic)\r\n  async changeRole(@Body() dto: AccountChangeRole.Request): Promise<AccountChangeRole.Response> {\r\n    const user = await this.userRepository.findUser(dto.email);\r\n    if (!user) throw new Error('Пользователь не найден');\r\n\r\n    const userEntity = new UserEntity(user);\r\n    userEntity.role = dto.newRole;\r\n    await this.userRepository.updateUserById(userEntity);\r\n    return { profile: userEntity.getPublicProfile() };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountDeleteUser.topic)\r\n  async deleteUser(@Body() { email }: AccountDeleteUser.Request): Promise<AccountDeleteUser.Response> {\r\n    const user = await this.userRepository.findUser(email);\r\n    if (!user) {\r\n      throw new Error('Пользователь не найден');\r\n    }\r\n    await this.userRepository.deleteUser(email);\r\n    return { success: true };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountChangePasswordProfile.topic)\r\n  async changePassword(\r\n    @Body() { id, passwords }: AccountChangePasswordProfile.Request,\r\n  ): Promise<AccountChangePasswordProfile.Response> {\r\n    const existedUser = await this.userRepository.findUserById(id);\r\n    if (!existedUser) throw new Error(THIS_USER_IS_NOT_EXISTS);\r\n\r\n    const userEntity = new UserEntity(existedUser);\r\n    const isOldValid = await userEntity.validatePassword(passwords.oldPassword);\r\n    if (!isOldValid) throw new Error(WRONG_OLD_PASSWORD);\r\n\r\n    await userEntity.setPassword(passwords.newPassword);\r\n\r\n    await this.userRepository.updateUserById(userEntity);\r\n\r\n    return { success: true };\r\n  }\r\n}\r\n","export * from './lib/account/account.change-profile';\r\nexport * from './lib/account/account.change-role';\r\nexport * from './lib/account/account.login';\r\nexport * from './lib/account/account.register';\r\nexport * from './lib/account/account.user-info';\r\nexport * from './lib/account/account.user-list';\r\nexport * from './lib/account/account.delete-user';\r\nexport * from './lib/account/account.user-search';\r\nexport * from './lib/account/account.change-password-profile';\r\nexport * from './lib/project/game.create';\r\nexport * from './lib/project/game.get-all';\r\nexport * from './lib/project/comment.create';\r\nexport * from './lib/project/comment.list';\r\n","import { Type } from 'class-transformer';\r\nimport { ValidateNested, IsString } from 'class-validator';\r\n\r\nclass ChangeProfileDto {\r\n  @IsString()\r\n  displayName: string;\r\n}\r\n\r\nexport namespace AccountChangeProfile {\r\n  export const topic = 'account.change-profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    id: string;\r\n\r\n    @ValidateNested()\r\n    @Type(() => ChangeProfileDto)\r\n    user: ChangeProfileDto;\r\n  }\r\n\r\n  export class Response {}\r\n}\r\n","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","import { IUser, UserRole } from '@shared/interfaces';\r\nimport { IsEnum, IsString } from 'class-validator';\r\n\r\nexport namespace AccountChangeRole {\r\n  export const topic = 'account.change-role.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    email: string;\r\n\r\n    @IsEnum(UserRole)\r\n    newRole: UserRole;\r\n  }\r\n\r\n  export class Response {\r\n    profile: Omit<IUser, 'passwordHash'>;\r\n  }\r\n}\r\n","import { IsEmail, IsString } from 'class-validator';\r\n\r\nexport namespace AccountLogin {\r\n  export const topic = 'account.login.command';\r\n\r\n  export class Request {\r\n    @IsEmail()\r\n    email: string;\r\n\r\n    @IsString()\r\n    password: string;\r\n  }\r\n\r\n  export class Response {\r\n    access_token: string;\r\n  }\r\n}\r\n","import { IsEmail, IsOptional, IsString } from 'class-validator';\r\n\r\nexport namespace AccountRegister {\r\n  export const topic = 'account.register.command';\r\n\r\n  export class Request {\r\n    @IsEmail()\r\n    email: string;\r\n\r\n    @IsString()\r\n    password: string;\r\n\r\n    @IsOptional()\r\n    @IsString()\r\n    displayName?: string;\r\n  }\r\n\r\n  export class Response {\r\n    email: string;\r\n  }\r\n}\r\n","import { IUser } from '@shared/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace AccountUserInfo {\r\n  export const topic = 'account.user-info.query';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    id: string;\r\n  }\r\n\r\n  export class Response {\r\n    profile: Omit<IUser, 'passwordHash'>;\r\n  }\r\n}\r\n","export namespace UserList {\r\n  export const topic = 'users.list';\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-object-type\r\n  export type Request = {};\r\n  export type Response = { users: { email: string; displayName: string; role: string }[] };\r\n}\r\n","import { IsEmail } from 'class-validator';\r\n\r\nexport namespace AccountDeleteUser {\r\n  export const topic = 'account.delete-user.command';\r\n\r\n  export class Request {\r\n    @IsEmail()\r\n    email: string;\r\n  }\r\n\r\n  export class Response {\r\n    success: boolean;\r\n  }\r\n}\r\n","import { IsOptional, IsString } from 'class-validator';\r\n\r\nexport namespace UserSearch {\r\n  export const topic = 'users.search.query';\r\n\r\n  export class Request {\r\n    @IsOptional()\r\n    @IsString()\r\n    query?: string;\r\n  }\r\n\r\n  export class Response {\r\n    users: Array<{\r\n      _id: string;\r\n      email: string;\r\n      displayName?: string;\r\n      role: string;\r\n    }>;\r\n  }\r\n}\r\n","import { IsString, MinLength, ValidateNested } from 'class-validator';\r\nimport { Type } from 'class-transformer';\r\n\r\nclass ChangePasswordDto {\r\n  @IsString()\r\n  @MinLength(6, { message: 'Старый пароль должен содержать минимум 6 символов' })\r\n  oldPassword: string;\r\n\r\n  @IsString()\r\n  @MinLength(6, { message: 'Новый пароль должен содержать минимум 6 символов' })\r\n  newPassword: string;\r\n}\r\n\r\nexport namespace AccountChangePasswordProfile {\r\n  export const topic = 'account.change-password-profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    id: string;\r\n\r\n    @Type(() => ChangePasswordDto)\r\n    @ValidateNested()\r\n    passwords: ChangePasswordDto;\r\n  }\r\n\r\n  export class Response {\r\n    success: boolean;\r\n  }\r\n}\r\n","import 'multer';\r\n\r\nexport namespace GameCreate {\r\n  export const topic = 'game.create.command';\r\n\r\n  export class Request {\r\n    title: string;\r\n    description: string;\r\n    gameBuffer: Buffer;\r\n    models?: Express.Multer.File[];\r\n  }\r\n\r\n  export class Response {\r\n    gameId: string;\r\n  }\r\n}\r\n","module.exports = require(\"multer\");","export namespace GameGetAll {\r\n  export const topic = 'game.get-all.query';\r\n\r\n  export class Request {}\r\n\r\n  export class Response {\r\n    games: {\r\n      gameId: string;\r\n      title: string;\r\n      url: string;\r\n    }[];\r\n  }\r\n}\r\n","export namespace CommentCreate {\r\n  export const topic = 'account.create.command';\r\n  export class Request {\r\n    gameId: string;\r\n    parent?: string;\r\n    content: string;\r\n    userId: string;\r\n  }\r\n  export class Response {\r\n    _id: string;\r\n    content: string;\r\n    author: { displayName: string; role: string; _id: string };\r\n    createdAt: string;\r\n    parent?: string;\r\n  }\r\n}\r\n","export namespace CommentList {\r\n  export const topic = 'account.list.query';\r\n  export class Request {\r\n    gameId: string;\r\n  }\r\n  export class Response {\r\n    comments: Array<{\r\n      _id: string;\r\n      content: string;\r\n      author: { displayName: string; role: string };\r\n      createdAt: string;\r\n      replies: any[];\r\n    }>;\r\n  }\r\n}\r\n","export const THIS_USER_IS_EXISTS = 'Такой пользователь уже зарегистрирован';\r\nexport const THIS_USER_IS_NOT_EXISTS = 'Такого пользователя не существует';\r\nexport const WRONG_LOGIN_OR_PASSWORD = 'Неверный логин или пароль';\r\nexport const WRONG_OLD_PASSWORD = 'Неверный пароль';\r\n","import { IUser, UserRole } from '@shared/interfaces';\r\nimport { compare, genSalt, hash } from 'bcryptjs';\r\nimport { Types } from 'mongoose';\r\n\r\nexport class UserEntity implements IUser {\r\n  _id?: Types.ObjectId;\r\n  displayName?: string;\r\n  email: string;\r\n  passwordHash: string;\r\n  role: UserRole;\r\n\r\n  constructor(user: Omit<IUser, 'passwordHash'>);\r\n  constructor(user: IUser);\r\n\r\n  constructor(user: IUser | Omit<IUser, 'passwordHash'>) {\r\n    this._id = user._id;\r\n    this.displayName = user.displayName;\r\n    this.email = user.email;\r\n    this.role = user.role;\r\n\r\n    if ('passwordHash' in user) {\r\n      this.passwordHash = user.passwordHash;\r\n    }\r\n  }\r\n\r\n  public getPublicProfile() {\r\n    return {\r\n      displayName: this.displayName,\r\n      email: this.email,\r\n      role: this.role,\r\n    };\r\n  }\r\n\r\n  public async setPassword(password: string) {\r\n    const salt = await genSalt(10);\r\n    this.passwordHash = await hash(password, salt);\r\n    return this;\r\n  }\r\n\r\n  public validatePassword(password: string) {\r\n    return compare(password, this.passwordHash);\r\n  }\r\n\r\n  public updateProfile(displayName: string) {\r\n    this.displayName = displayName;\r\n    return this;\r\n  }\r\n}\r\n","module.exports = require(\"bcryptjs\");","import { Body, Controller } from '@nestjs/common';\r\nimport { AccountUserInfo, UserList, UserSearch } from '@shared/contracts';\r\nimport { RMQRoute, RMQValidate } from 'nestjs-rmq';\r\nimport { UserEntity } from './entities/user.entity';\r\nimport { UserRepository } from './repos/user.repository';\r\n\r\n@Controller()\r\nexport class UserQueries {\r\n  constructor(private readonly userRepository: UserRepository) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountUserInfo.topic)\r\n  async userInfo(@Body() { id }: AccountUserInfo.Request): Promise<AccountUserInfo.Response> {\r\n    const user = await this.userRepository.findUserById(id);\r\n    const profile = new UserEntity(user).getPublicProfile();\r\n    return { profile };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(UserSearch.topic)\r\n  async searchUsers(@Body() dto: UserSearch.Request): Promise<UserSearch.Response> {\r\n    const found = await this.userRepository.searchByDisplayName(dto.query);\r\n    return {\r\n      users: found.map((u) => ({\r\n        _id: u._id.toString(),\r\n        email: u.email,\r\n        displayName: u.displayName,\r\n        role: u.role,\r\n      })),\r\n    };\r\n  }\r\n\r\n  @RMQRoute(UserList.topic)\r\n  async listUsers(): Promise<UserList.Response> {\r\n    const users = await this.userRepository.findAllUsers();\r\n    return {\r\n      users: users.map((u) => ({\r\n        email: u.email,\r\n        displayName: u.displayName,\r\n        role: u.role,\r\n      })),\r\n    };\r\n  }\r\n}\r\n","import { Body, Controller } from '@nestjs/common';\r\nimport { AccountLogin, AccountRegister } from '@shared/contracts';\r\nimport { RMQRoute, RMQValidate } from 'nestjs-rmq';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Controller()\r\nexport class AuthContoller {\r\n  constructor(private readonly authService: AuthService) {}\r\n  @RMQValidate()\r\n  @RMQRoute(AccountRegister.topic)\r\n  async register(@Body() dto: AccountRegister.Request): Promise<AccountRegister.Response> {\r\n    return this.authService.register(dto);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountLogin.topic)\r\n  async login(@Body() { email, password }: AccountLogin.Request): Promise<AccountLogin.Response> {\r\n    const { id } = await this.authService.validateUser(email, password);\r\n    return this.authService.login(id.toString());\r\n  }\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { AccountRegister } from '@shared/contracts';\r\nimport { UserRole } from '@shared/interfaces';\r\nimport { Types } from 'mongoose';\r\nimport { UserEntity } from '../user/entities/user.entity';\r\nimport { UserRepository } from '../user/repos/user.repository';\r\nimport { THIS_USER_IS_EXISTS, WRONG_LOGIN_OR_PASSWORD } from './others/account.constants';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private readonly userRepository: UserRepository,\r\n    private readonly jwtService: JwtService,\r\n  ) {}\r\n\r\n  async register({ email, password, displayName }: AccountRegister.Request): Promise<AccountRegister.Response> {\r\n    const oldUser = await this.userRepository.findUser(email);\r\n    if (oldUser) throw new Error(THIS_USER_IS_EXISTS);\r\n    const newUserEntity = await new UserEntity({\r\n      displayName,\r\n      email,\r\n      role: UserRole.Admin,\r\n    }).setPassword(password);\r\n    const newUser = await this.userRepository.createUser(newUserEntity);\r\n    return { email: newUser.email };\r\n  }\r\n\r\n  async validateUser(email: string, password: string): Promise<{ id: Types.ObjectId }> {\r\n    const user = await this.userRepository.findUser(email);\r\n    if (!user) throw new Error(WRONG_LOGIN_OR_PASSWORD);\r\n    const userEntity = new UserEntity(user);\r\n    const isCorrectPassword = await userEntity.validatePassword(password);\r\n    if (!isCorrectPassword) throw new Error(WRONG_LOGIN_OR_PASSWORD);\r\n    return { id: user._id };\r\n  }\r\n\r\n  async login(id: string) {\r\n    return {\r\n      access_token: await this.jwtService.signAsync({ id }),\r\n    };\r\n  }\r\n}\r\n","import { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { MongooseModuleAsyncOptions } from '@nestjs/mongoose';\r\n\r\nexport const getMongoConfig = (): MongooseModuleAsyncOptions => {\r\n  return {\r\n    useFactory: (configService: ConfigService) => ({\r\n      uri: getMongoString(configService),\r\n    }),\r\n    inject: [ConfigService],\r\n    imports: [ConfigModule],\r\n  };\r\n};\r\n\r\nconst getMongoString = (configService: ConfigService) =>\r\n  'mongodb://' +\r\n  configService.get('MONGO_LOGIN') +\r\n  ':' +\r\n  configService.get('MONGO_PASSWORD') +\r\n  '@' +\r\n  configService.get('MONGO_HOST') +\r\n  ':' +\r\n  configService.get('MONGO_PORT') +\r\n  '/' +\r\n  configService.get('MONGO_DATABASE') +\r\n  '?authSource=' +\r\n  configService.get('MONGO_AUTHDATABASE');\r\n","import { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { IRMQServiceAsyncOptions } from 'nestjs-rmq';\r\n\r\nexport const getRMQConfig = (): IRMQServiceAsyncOptions => ({\r\n  inject: [ConfigService],\r\n  imports: [ConfigModule],\r\n  useFactory: (configService: ConfigService) => ({\r\n    exchangeName: configService.get('AMQP_EXCHANGE') ?? '',\r\n    connections: [\r\n      {\r\n        login: configService.get('AMQP_LOGIN_USER') ?? '',\r\n        password: configService.get('AMQP_PASSWORD_USER') ?? '',\r\n        host: configService.get('AMQP_HOSTNAME') ?? '',\r\n      },\r\n    ],\r\n    queueName: configService.get('AMQP_QUEUE') ?? '',\r\n    prefetchCount: 32,\r\n    serviceName: 'account-ms',\r\n  }),\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app/app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.enableCors();\r\n  const port = process.env.PORT || 3002;\r\n  await app.listen(port);\r\n  Logger.log(`🚀 Application is running on: http://localhost:${port}/${globalPrefix}`);\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}